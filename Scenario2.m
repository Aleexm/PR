%% Preprocess images for scenario 2
dataScenario2 = gendat(cleanedDataset, 0.05); % 10 samples per class
[testset, trainset] = gendat(dataScenario2, 0.2); % split into train & test data for pcam
cleanedDataset32 = prdataset(cleanedImages32, labels);
dataScenario2_32 = gendat(cleanedDataset32, 0.05);
%% Create profiles features
numBins = 2;
profileDataset = getProfileDataset(cleanedImages, labels, numBins);

%% Feature selection preparation
[profileDatasetTrain, profileDatasetTest] = gendat(profileDataset, 0.8);
% use prcrossval(pdigits,[], 10) to perform 10-fold-cross validation to estimate test error
% feature selection

selI = featseli([], 'maha-s'); % individual
selO = featselo([], 'maha-s'); % branch and bound
selF = featself([], 'maha-s'); % forward
selB = featselb([], 'maha-s'); % backward
selP = featselp([], 'maha-s'); % floating
selLR = featsellr([], 'maha-s', 0, 3, 1); % plus-l-takeaway-r

%% Feature Exctraction pcam 
numRounds = 10;
errorPerRound = []; % classification error per round
varianceRetain = 0.7; % how much variance to retain
for i = 1:numRounds
    [testset, trainset] = gendat(dataScenario2, 0.2); % split into train & test data for pcam
    u = pcam([], varianceRetain) * knnc([], 1);
    w = trainset * u;
    errorPerRound = [errorPerRound, testset * w * testc];
    disp(i);
end
avg = mean(errorPerRound); % calculate average
stdE = std(errorPerRound); % calculate standard deviation

%% Profile feature datasets with different numbers of bins for scenario 1
prof1_132 = getProfileDataset(cleanedImages, labels, 1);
prof2_132 = getProfileDataset(cleanedImages, labels, 2);
prof4_132 = getProfileDataset(cleanedImages, labels, 4);
prof8_132 = getProfileDataset(cleanedImages, labels, 8);
prof16_132 = getProfileDataset(cleanedImages, labels, 16);
prof32_132 = getProfileDataset(cleanedImages, labels, 32);
prof64_132 = getProfileDataset(cleanedImages, labels, 64);
prof128_132 = getProfileDataset(cleanedImages, labels, 128);
%% Profile feature datasets with different numbers of bins for scenario 2
prof1 = getProfileDataset(dataScenario2.data, dataScenario2.labels, 1);
prof2 = getProfileDataset(dataScenario2.data, dataScenario2.labels, 2);
prof4 = getProfileDataset(dataScenario2.data, dataScenario2.labels, 4);
prof8 = getProfileDataset(dataScenario2.data, dataScenario2.labels, 8);
prof16 = getProfileDataset(dataScenario2.data, dataScenario2.labels, 16);
prof32 = getProfileDataset(dataScenario2.data, dataScenario2.labels, 32);
prof64 = getProfileDataset(dataScenario2.data, dataScenario2.labels, 64);
prof128 = getProfileDataset(dataScenario2.data, dataScenario2.labels, 128);
%% Dissimilarity
numIt = 10;
splitPercentage = 0.1;
set = prof32;
repPercentage = 2/9;

errorPerRoundNMC = [];
errorPerRoundLDC = [];
errorPerRoundQDC = [];
errorPerRoundF = [];
errorPerRoundLOG = [];
errorPerRound1 = [];
errorPerRound3 = [];
errorPerRound5 = [];
errorPerRound7 = [];
errorPerRound9 = [];
errorPerRound11 = [];
errorPerRoundP = [];
errorPerRoundSVC = [];
errorPerRoundRBF = [];
errorPerRoundN = [];

for i = 1:numIt
    [testset, trainset] = gendat(set, splitPercentage);
    [repset, trainset] = gendat(trainset, repPercentage);

    w = proxm(repset);
    ctrain = trainset * w;
    ctest = testset * w;
    
    class = ctrain * nmc;
    errorPerRoundNMC = [errorPerRoundNMC, ctest * class * testc];
    class = ctrain * ldc;
    errorPerRoundLDC = [errorPerRoundLDC, ctest * class * testc];
    class = ctrain * qdc;
    errorPerRoundQDC = [errorPerRoundQDC, ctest * class * testc];
    class = ctrain * fisherc;
    errorPerRoundF = [errorPerRoundF, ctest * class * testc];
    class = ctrain * loglc;
    errorPerRoundLOG = [errorPerRoundLOG, ctest * class * testc];
     class = ctrain * knnc([], 1);
    errorPerRound1 = [errorPerRound1, ctest * class * testc];
     class = ctrain * knnc([], 3);
    errorPerRound3 = [errorPerRound3, ctest * class * testc];
     class = ctrain * knnc([], 5);
    errorPerRound5 = [errorPerRound5, ctest * class * testc];
     class = ctrain * knnc([], 7);
    errorPerRound7 = [errorPerRound7, ctest * class * testc];
     class = ctrain * knnc([], 9);
    errorPerRound9 = [errorPerRound9, ctest * class * testc];
     class = ctrain * knnc([], 11);
    errorPerRound11 = [errorPerRound11, ctest * class * testc];
     class = ctrain * parzenc;
    errorPerRoundP = [errorPerRoundP, ctest * class * testc];
    class = ctrain * svc;
    errorPerRoundSVC = [errorPerRoundSVC, ctest * class * testc];
    class = ctrain * svc([], proxm('r',1));
    errorPerRoundRBF = [errorPerRoundRBF, ctest * class * testc];
     class = ctrain * neurc;
    errorPerRoundN = [errorPerRoundN, ctest * class * testc];
    
    disp(i);
end

eNMC = mean(errorPerRoundNMC);
eLDC = mean(errorPerRoundLDC);
eQDC = mean(errorPerRoundQDC);
eF= mean(errorPerRoundF);
eLOG = mean(errorPerRoundLOG);
e1 = mean(errorPerRound1);
e3 = mean(errorPerRound3);
e5 = mean(errorPerRound5);
e7 = mean(errorPerRound7);
e9 = mean(errorPerRound9);
e11 = mean(errorPerRound11);
eP = mean(errorPerRoundP);
eSVC = mean(errorPerRoundSVC);
eN = mean(errorPerRoundN);
eRBF = mean(errorPerRoundRBF);
error = [eNMC, eLDC, eQDC, eF, eLOG, e1, e3, e5, e7, e9, e11, eP, eSVC, eRBF, eN];
%c = prof16 * w; % create dissimilarity representation
%datas = dataset(cleanedImages, labels);

%[v,sig] = psem(datas, 10); 
%b = prof16*v; 
%[testset, trainset] = gendat(prof16, 0.1);
%d = distm(testset, trainset);
%error = testkd(d)
%[testset, trainset] = gendat(prof16, 0.1);
%d = distm(trainset, testset);
%% Test profile feature datasets with 5-fold cross validation
set = prdataset(cleanedImages16, labels);
numIt = 10;
enmc = prcrossval(set, nmc, numIt);
disp("nmc");
eldc = prcrossval(set, ldc, numIt);
eqdc = prcrossval(set, qdc, numIt);
ef = prcrossval(set, fisherc, numIt);
elog = prcrossval(set, loglc, numIt);
e1 = prcrossval(set, knnc([], 1), numIt);
e3 = prcrossval(set, knnc([], 3), numIt);
e5 = prcrossval(set, knnc([], 5), numIt);
e7 = prcrossval(set, knnc([], 7), numIt);
e9 = prcrossval(set, knnc([], 9), numIt);
e11 = prcrossval(set, knnc([], 11), numIt);
ep = prcrossval(set, parzenc, numIt);
%esvc = prcrossval(set, svc, numIt);
esvc = 0;
disp("svc");
%erbf = prcrossval(set, svc([], proxm('r',1)), numIt);
erbf = 0;
en = prcrossval(set, neurc, numIt);
error = [enmc, eldc, eqdc, ef, elog, e1, e3, e5, e7, e9, e11, ep, esvc, erbf, en];

%% For Neurc and pcam on pixels
p = [0.95, 0.90, 0.85, 0.80, 0.75, 0.70, 0.65, 0.60];
numRounds = 10;
splitPercentage = 0.1;
set = dataScenario2_32;
results = [];
resultsPerRound = [];
for i = 1:8
    resultsPerRound = [];
    for round = 1: numRounds
        [testset, trainset] = gendat(set, splitPercentage);
        un = pcam([], p(i)) * svc([], proxm('r',1));
        wn = trainset * un;
        resultsPerRound = [resultsPerRound, testset * wn * testc];
        disp(round);
    end
    avg = mean(resultsPerRound);
    results = [results; avg];
    disp(p(i));
    disp("****");
end
%% %% For Neurc and fisherm
p = [9, 5];
numRounds = 5;
splitPercentage = 0.2;
set = cleanedDataset32;
results = [];
resultsPerRound = [];
for i = 1:2
    resultsPerRound = [];
    for round = 1: numRounds
        [testset, trainset] = gendat(set, splitPercentage);
        un = fisherm([], p(i)) * svc;
        wn = trainset * un;
        resultsPerRound = [resultsPerRound, testset * wn * testc];
        disp(round);
    end
    avg = mean(resultsPerRound);
    results = [results; avg];
    disp(p(i));
    disp("****");
end

%% Feature extraction pcam on profiles features
numRounds = 10;
errorPerRoundnmc = []; % classification error per round
errorPerRoundldc = [];
errorPerRoundqdc = [];
errorPerRoundf = [];
errorPerRoundlog = [];
errorPerRound1 = [];
errorPerRound3 = [];
errorPerRound5 = [];
errorPerRound7 = [];
errorPerRound9 = [];
errorPerRound11 = [];
errorPerRoundp = [];
errorPerRoundsvc = [];
errorPerRoundrbf = [];
varianceRetain = 0.95; % how much variance to retain
for i = 1:numRounds
    [testset, trainset] = gendat(dataScenario2, 0.1); % split into train & test data for pcam
    unmc = pcam([], varianceRetain) * nmc;
    wnmc = trainset * unmc;
    errorPerRoundnmc = [errorPerRoundnmc, testset * wnmc * testc];
    uldc = pcam([], varianceRetain) * ldc;
    wldc = trainset * uldc;
    errorPerRoundldc = [errorPerRoundldc, testset * wldc * testc];
    uqdc = pcam([], varianceRetain) * qdc;
    wqdc = trainset * uqdc;
    errorPerRoundqdc = [errorPerRoundqdc, testset * wqdc * testc];
    uf = pcam([], varianceRetain) * fisherc;
    wf = trainset * uf;
    errorPerRoundf = [errorPerRoundf, testset * wf * testc];
    ulog = pcam([], varianceRetain) * loglc;
    wlog = trainset * ulog;
    errorPerRoundlog = [errorPerRoundlog, testset * wlog * testc];
    u1 = pcam([], varianceRetain) * knnc([], 1);
    w1 = trainset * u1;
    errorPerRound1 = [errorPerRound1, testset * w1 * testc];
    u3 = pcam([], varianceRetain) * knnc([], 3);
    w3 = trainset * u3;
    errorPerRound3 = [errorPerRound3, testset * w3 * testc];
    u5 = pcam([], varianceRetain) * knnc([], 5);
    w5 = trainset * u5;
    errorPerRound5 = [errorPerRound5, testset * w5 * testc];
    u7 = pcam([], varianceRetain) * knnc([], 7);
    w7 = trainset * u7;
    errorPerRound7 = [errorPerRound7, testset * w7 * testc];
    u9 = pcam([], varianceRetain) * knnc([], 9);
    w9 = trainset * u9;
    errorPerRound9 = [errorPerRound9, testset * w9 * testc];
    u11 = pcam([], varianceRetain) * knnc([], 11);
    w11 = trainset * u11;
    errorPerRound11 = [errorPerRound11, testset * w11 * testc];
    disp(i);
    up = pcam([], varianceRetain) * parzenc;
    wp = trainset * up;
    errorPerRoundp = [errorPerRoundp, testset * wp * testc];
    usvc = pcam([], varianceRetain) * svc;
    wsvc = trainset * usvc;
    errorPerRoundsvc = [errorPerRoundsvc, testset * wsvc * testc];
    urbf = pcam([], varianceRetain) * svc([], proxm('r',1));
    wrbf = trainset * urbf;
    errorPerRoundrbf = [errorPerRoundrbf, testset * wrbf * testc];
end
enmc = mean(errorPerRoundnmc); % calculate average
eldc = mean(errorPerRoundldc);
eqdc = mean(errorPerRoundqdc);
ef = mean(errorPerRoundf);
elog = mean(errorPerRoundlog);
e1 = mean(errorPerRound1);
e3 = mean(errorPerRound3);
e5 = mean(errorPerRound5);
e7 = mean(errorPerRound7);
e9 = mean(errorPerRound9);
e11 = mean(errorPerRound11);
ep = mean(errorPerRoundp);
esvc = mean(errorPerRoundsvc);
erbf = mean(errorPerRoundrbf);
disp("0.95 done");
error95 = [enmc, eldc, eqdc, ef, elog, e1, e3, e5, e7, e9, e11, ep, esvc, erbf];

errorPerRoundnmc = []; % classification error per round
errorPerRoundldc = [];
errorPerRoundqdc = [];
errorPerRoundf = [];
errorPerRoundlog = [];
errorPerRound1 = [];
errorPerRound3 = [];
errorPerRound5 = [];
errorPerRound7 = [];
errorPerRound9 = [];
errorPerRound11 = [];
errorPerRoundp = [];
errorPerRoundsvc = [];
errorPerRoundrbf = [];
varianceRetain = 0.9; % how much variance to retain
for i = 1:numRounds
    [testset, trainset] = gendat(dataScenario2, 0.1); % split into train & test data for pcam
    unmc = pcam([], varianceRetain) * nmc;
    wnmc = trainset * unmc;
    errorPerRoundnmc = [errorPerRoundnmc, testset * wnmc * testc];
    uldc = pcam([], varianceRetain) * ldc;
    wldc = trainset * uldc;
    errorPerRoundldc = [errorPerRoundldc, testset * wldc * testc];
    uqdc = pcam([], varianceRetain) * qdc;
    wqdc = trainset * uqdc;
    errorPerRoundqdc = [errorPerRoundqdc, testset * wqdc * testc];
    uf = pcam([], varianceRetain) * fisherc;
    wf = trainset * uf;
    errorPerRoundf = [errorPerRoundf, testset * wf * testc];
    ulog = pcam([], varianceRetain) * loglc;
    wlog = trainset * ulog;
    errorPerRoundlog = [errorPerRoundlog, testset * wlog * testc];
    u1 = pcam([], varianceRetain) * knnc([], 1);
    w1 = trainset * u1;
    errorPerRound1 = [errorPerRound1, testset * w1 * testc];
    u3 = pcam([], varianceRetain) * knnc([], 3);
    w3 = trainset * u3;
    errorPerRound3 = [errorPerRound3, testset * w3 * testc];
    u5 = pcam([], varianceRetain) * knnc([], 5);
    w5 = trainset * u5;
    errorPerRound5 = [errorPerRound5, testset * w5 * testc];
    u7 = pcam([], varianceRetain) * knnc([], 7);
    w7 = trainset * u7;
    errorPerRound7 = [errorPerRound7, testset * w7 * testc];
    u9 = pcam([], varianceRetain) * knnc([], 9);
    w9 = trainset * u9;
    errorPerRound9 = [errorPerRound9, testset * w9 * testc];
    u11 = pcam([], varianceRetain) * knnc([], 11);
    w11 = trainset * u11;
    errorPerRound11 = [errorPerRound11, testset * w11 * testc];
    disp(i);
    up = pcam([], varianceRetain) * parzenc;
    wp = trainset * up;
    errorPerRoundp = [errorPerRoundp, testset * wp * testc];
    usvc = pcam([], varianceRetain) * svc;
    wsvc = trainset * usvc;
    errorPerRoundsvc = [errorPerRoundsvc, testset * wsvc * testc];
    urbf = pcam([], varianceRetain) * svc([], proxm('r',1));
    wrbf = trainset * urbf;
    errorPerRoundrbf = [errorPerRoundrbf, testset * wrbf * testc];
end
enmc = mean(errorPerRoundnmc); % calculate average
eldc = mean(errorPerRoundldc);
eqdc = mean(errorPerRoundqdc);
ef = mean(errorPerRoundf);
elog = mean(errorPerRoundlog);
e1 = mean(errorPerRound1);
e3 = mean(errorPerRound3);
e5 = mean(errorPerRound5);
e7 = mean(errorPerRound7);
e9 = mean(errorPerRound9);
e11 = mean(errorPerRound11);
ep = mean(errorPerRoundp);
esvc = mean(errorPerRoundsvc);
erbf = mean(errorPerRoundrbf);
disp("0.9 done")
error90 = [enmc, eldc, eqdc, ef, elog, e1, e3, e5, e7, e9, e11, ep, esvc, erbf];

errorPerRoundnmc = []; % classification error per round
errorPerRoundldc = [];
errorPerRoundqdc = [];
errorPerRoundf = [];
errorPerRoundlog = [];
errorPerRound1 = [];
errorPerRound3 = [];
errorPerRound5 = [];
errorPerRound7 = [];
errorPerRound9 = [];
errorPerRound11 = [];
errorPerRoundp = [];
errorPerRoundsvc = [];
errorPerRoundrbf = [];
varianceRetain = 0.85; % how much variance to retain
for i = 1:numRounds
    [testset, trainset] = gendat(dataScenario2, 0.1); % split into train & test data for pcam
    unmc = pcam([], varianceRetain) * nmc;
    wnmc = trainset * unmc;
    errorPerRoundnmc = [errorPerRoundnmc, testset * wnmc * testc];
    uldc = pcam([], varianceRetain) * ldc;
    wldc = trainset * uldc;
    errorPerRoundldc = [errorPerRoundldc, testset * wldc * testc];
    uqdc = pcam([], varianceRetain) * qdc;
    wqdc = trainset * uqdc;
    errorPerRoundqdc = [errorPerRoundqdc, testset * wqdc * testc];
    uf = pcam([], varianceRetain) * fisherc;
    wf = trainset * uf;
    errorPerRoundf = [errorPerRoundf, testset * wf * testc];
    ulog = pcam([], varianceRetain) * loglc;
    wlog = trainset * ulog;
    errorPerRoundlog = [errorPerRoundlog, testset * wlog * testc];
    u1 = pcam([], varianceRetain) * knnc([], 1);
    w1 = trainset * u1;
    errorPerRound1 = [errorPerRound1, testset * w1 * testc];
    u3 = pcam([], varianceRetain) * knnc([], 3);
    w3 = trainset * u3;
    errorPerRound3 = [errorPerRound3, testset * w3 * testc];
    u5 = pcam([], varianceRetain) * knnc([], 5);
    w5 = trainset * u5;
    errorPerRound5 = [errorPerRound5, testset * w5 * testc];
    u7 = pcam([], varianceRetain) * knnc([], 7);
    w7 = trainset * u7;
    errorPerRound7 = [errorPerRound7, testset * w7 * testc];
    u9 = pcam([], varianceRetain) * knnc([], 9);
    w9 = trainset * u9;
    errorPerRound9 = [errorPerRound9, testset * w9 * testc];
    u11 = pcam([], varianceRetain) * knnc([], 11);
    w11 = trainset * u11;
    errorPerRound11 = [errorPerRound11, testset * w11 * testc];
    disp(i);
    up = pcam([], varianceRetain) * parzenc;
    wp = trainset * up;
    errorPerRoundp = [errorPerRoundp, testset * wp * testc];
    usvc = pcam([], varianceRetain) * svc;
    wsvc = trainset * usvc;
    errorPerRoundsvc = [errorPerRoundsvc, testset * wsvc * testc];
    urbf = pcam([], varianceRetain) * svc([], proxm('r',1));
    wrbf = trainset * urbf;
    errorPerRoundrbf = [errorPerRoundrbf, testset * wrbf * testc];
end
enmc = mean(errorPerRoundnmc); % calculate average
eldc = mean(errorPerRoundldc);
eqdc = mean(errorPerRoundqdc);
ef = mean(errorPerRoundf);
elog = mean(errorPerRoundlog);
e1 = mean(errorPerRound1);
e3 = mean(errorPerRound3);
e5 = mean(errorPerRound5);
e7 = mean(errorPerRound7);
e9 = mean(errorPerRound9);
e11 = mean(errorPerRound11);
ep = mean(errorPerRoundp);
esvc = mean(errorPerRoundsvc);
erbf = mean(errorPerRoundrbf);
disp("0.85 done");
error85 = [enmc, eldc, eqdc, ef, elog, e1, e3, e5, e7, e9, e11, ep, esvc, erbf];

errorPerRoundnmc = []; % classification error per round
errorPerRoundldc = [];
errorPerRoundqdc = [];
errorPerRoundf = [];
errorPerRoundlog = [];
errorPerRound1 = [];
errorPerRound3 = [];
errorPerRound5 = [];
errorPerRound7 = [];
errorPerRound9 = [];
errorPerRound11 = [];
errorPerRoundp = [];
errorPerRoundsvc = [];
errorPerRoundrbf = [];
varianceRetain = 0.8; % how much variance to retain
for i = 1:numRounds
    [testset, trainset] = gendat(dataScenario2, 0.1); % split into train & test data for pcam
    unmc = pcam([], varianceRetain) * nmc;
    wnmc = trainset * unmc;
    errorPerRoundnmc = [errorPerRoundnmc, testset * wnmc * testc];
    uldc = pcam([], varianceRetain) * ldc;
    wldc = trainset * uldc;
    errorPerRoundldc = [errorPerRoundldc, testset * wldc * testc];
    uqdc = pcam([], varianceRetain) * qdc;
    wqdc = trainset * uqdc;
    errorPerRoundqdc = [errorPerRoundqdc, testset * wqdc * testc];
    uf = pcam([], varianceRetain) * fisherc;
    wf = trainset * uf;
    errorPerRoundf = [errorPerRoundf, testset * wf * testc];
    ulog = pcam([], varianceRetain) * loglc;
    wlog = trainset * ulog;
    errorPerRoundlog = [errorPerRoundlog, testset * wlog * testc];
    u1 = pcam([], varianceRetain) * knnc([], 1);
    w1 = trainset * u1;
    errorPerRound1 = [errorPerRound1, testset * w1 * testc];
    u3 = pcam([], varianceRetain) * knnc([], 3);
    w3 = trainset * u3;
    errorPerRound3 = [errorPerRound3, testset * w3 * testc];
    u5 = pcam([], varianceRetain) * knnc([], 5);
    w5 = trainset * u5;
    errorPerRound5 = [errorPerRound5, testset * w5 * testc];
    u7 = pcam([], varianceRetain) * knnc([], 7);
    w7 = trainset * u7;
    errorPerRound7 = [errorPerRound7, testset * w7 * testc];
    u9 = pcam([], varianceRetain) * knnc([], 9);
    w9 = trainset * u9;
    errorPerRound9 = [errorPerRound9, testset * w9 * testc];
    u11 = pcam([], varianceRetain) * knnc([], 11);
    w11 = trainset * u11;
    errorPerRound11 = [errorPerRound11, testset * w11 * testc];
    disp(i);
    up = pcam([], varianceRetain) * parzenc;
    wp = trainset * up;
    errorPerRoundp = [errorPerRoundp, testset * wp * testc];
    usvc = pcam([], varianceRetain) * svc;
    wsvc = trainset * usvc;
    errorPerRoundsvc = [errorPerRoundsvc, testset * wsvc * testc];
    urbf = pcam([], varianceRetain) * svc([], proxm('r',1));
    wrbf = trainset * urbf;
    errorPerRoundrbf = [errorPerRoundrbf, testset * wrbf * testc];
end
enmc = mean(errorPerRoundnmc); % calculate average
eldc = mean(errorPerRoundldc);
eqdc = mean(errorPerRoundqdc);
ef = mean(errorPerRoundf);
elog = mean(errorPerRoundlog);
e1 = mean(errorPerRound1);
e3 = mean(errorPerRound3);
e5 = mean(errorPerRound5);
e7 = mean(errorPerRound7);
e9 = mean(errorPerRound9);
e11 = mean(errorPerRound11);
ep = mean(errorPerRoundp);
esvc = mean(errorPerRoundsvc);
erbf = mean(errorPerRoundrbf);
disp("0.8 done");
error80 = [enmc, eldc, eqdc, ef, elog, e1, e3, e5, e7, e9, e11, ep, esvc, erbf];

errorPerRoundnmc = []; % classification error per round
errorPerRoundldc = [];
errorPerRoundqdc = [];
errorPerRoundf = [];
errorPerRoundlog = [];
errorPerRound1 = [];
errorPerRound3 = [];
errorPerRound5 = [];
errorPerRound7 = [];
errorPerRound9 = [];
errorPerRound11 = [];
errorPerRoundp = [];
errorPerRoundsvc = [];
errorPerRoundrbf = [];
varianceRetain = 0.75; % how much variance to retain
for i = 1:numRounds
    [testset, trainset] = gendat(dataScenario2, 0.1); % split into train & test data for pcam
    unmc = pcam([], varianceRetain) * nmc;
    wnmc = trainset * unmc;
    errorPerRoundnmc = [errorPerRoundnmc, testset * wnmc * testc];
    uldc = pcam([], varianceRetain) * ldc;
    wldc = trainset * uldc;
    errorPerRoundldc = [errorPerRoundldc, testset * wldc * testc];
    uqdc = pcam([], varianceRetain) * qdc;
    wqdc = trainset * uqdc;
    errorPerRoundqdc = [errorPerRoundqdc, testset * wqdc * testc];
    uf = pcam([], varianceRetain) * fisherc;
    wf = trainset * uf;
    errorPerRoundf = [errorPerRoundf, testset * wf * testc];
    ulog = pcam([], varianceRetain) * loglc;
    wlog = trainset * ulog;
    errorPerRoundlog = [errorPerRoundlog, testset * wlog * testc];
    u1 = pcam([], varianceRetain) * knnc([], 1);
    w1 = trainset * u1;
    errorPerRound1 = [errorPerRound1, testset * w1 * testc];
    u3 = pcam([], varianceRetain) * knnc([], 3);
    w3 = trainset * u3;
    errorPerRound3 = [errorPerRound3, testset * w3 * testc];
    u5 = pcam([], varianceRetain) * knnc([], 5);
    w5 = trainset * u5;
    errorPerRound5 = [errorPerRound5, testset * w5 * testc];
    u7 = pcam([], varianceRetain) * knnc([], 7);
    w7 = trainset * u7;
    errorPerRound7 = [errorPerRound7, testset * w7 * testc];
    u9 = pcam([], varianceRetain) * knnc([], 9);
    w9 = trainset * u9;
    errorPerRound9 = [errorPerRound9, testset * w9 * testc];
    u11 = pcam([], varianceRetain) * knnc([], 11);
    w11 = trainset * u11;
    errorPerRound11 = [errorPerRound11, testset * w11 * testc];
    disp(i);
    up = pcam([], varianceRetain) * parzenc;
    wp = trainset * up;
    errorPerRoundp = [errorPerRoundp, testset * wp * testc];
    usvc = pcam([], varianceRetain) * svc;
    wsvc = trainset * usvc;
    errorPerRoundsvc = [errorPerRoundsvc, testset * wsvc * testc];
    urbf = pcam([], varianceRetain) * svc([], proxm('r',1));
    wrbf = trainset * urbf;
    errorPerRoundrbf = [errorPerRoundrbf, testset * wrbf * testc];
end
enmc = mean(errorPerRoundnmc); % calculate average
eldc = mean(errorPerRoundldc);
eqdc = mean(errorPerRoundqdc);
ef = mean(errorPerRoundf);
elog = mean(errorPerRoundlog);
e1 = mean(errorPerRound1);
e3 = mean(errorPerRound3);
e5 = mean(errorPerRound5);
e7 = mean(errorPerRound7);
e9 = mean(errorPerRound9);
e11 = mean(errorPerRound11);
ep = mean(errorPerRoundp);
esvc = mean(errorPerRoundsvc);
erbf = mean(errorPerRoundrbf);
disp("0.75 done");
error75 = [enmc, eldc, eqdc, ef, elog, e1, e3, e5, e7, e9, e11, ep, esvc, erbf];

errorPerRoundnmc = []; % classification error per round
errorPerRoundldc = [];
errorPerRoundqdc = [];
errorPerRoundf = [];
errorPerRoundlog = [];
errorPerRound1 = [];
errorPerRound3 = [];
errorPerRound5 = [];
errorPerRound7 = [];
errorPerRound9 = [];
errorPerRound11 = [];
errorPerRoundp = [];
errorPerRoundsvc = [];
errorPerRoundrbf = [];
varianceRetain = 0.7; % how much variance to retain
for i = 1:numRounds
    [testset, trainset] = gendat(dataScenario2, 0.1); % split into train & test data for pcam
    unmc = pcam([], varianceRetain) * nmc;
    wnmc = trainset * unmc;
    errorPerRoundnmc = [errorPerRoundnmc, testset * wnmc * testc];
    uldc = pcam([], varianceRetain) * ldc;
    wldc = trainset * uldc;
    errorPerRoundldc = [errorPerRoundldc, testset * wldc * testc];
    uqdc = pcam([], varianceRetain) * qdc;
    wqdc = trainset * uqdc;
    errorPerRoundqdc = [errorPerRoundqdc, testset * wqdc * testc];
    uf = pcam([], varianceRetain) * fisherc;
    wf = trainset * uf;
    errorPerRoundf = [errorPerRoundf, testset * wf * testc];
    ulog = pcam([], varianceRetain) * loglc;
    wlog = trainset * ulog;
    errorPerRoundlog = [errorPerRoundlog, testset * wlog * testc];
    u1 = pcam([], varianceRetain) * knnc([], 1);
    w1 = trainset * u1;
    errorPerRound1 = [errorPerRound1, testset * w1 * testc];
    u3 = pcam([], varianceRetain) * knnc([], 3);
    w3 = trainset * u3;
    errorPerRound3 = [errorPerRound3, testset * w3 * testc];
    u5 = pcam([], varianceRetain) * knnc([], 5);
    w5 = trainset * u5;
    errorPerRound5 = [errorPerRound5, testset * w5 * testc];
    u7 = pcam([], varianceRetain) * knnc([], 7);
    w7 = trainset * u7;
    errorPerRound7 = [errorPerRound7, testset * w7 * testc];
    u9 = pcam([], varianceRetain) * knnc([], 9);
    w9 = trainset * u9;
    errorPerRound9 = [errorPerRound9, testset * w9 * testc];
    u11 = pcam([], varianceRetain) * knnc([], 11);
    w11 = trainset * u11;
    errorPerRound11 = [errorPerRound11, testset * w11 * testc];
    disp(i);
    up = pcam([], varianceRetain) * parzenc;
    wp = trainset * up;
    errorPerRoundp = [errorPerRoundp, testset * wp * testc];
    usvc = pcam([], varianceRetain) * svc;
    wsvc = trainset * usvc;
    errorPerRoundsvc = [errorPerRoundsvc, testset * wsvc * testc];
    urbf = pcam([], varianceRetain) * svc([], proxm('r',1));
    wrbf = trainset * urbf;
    errorPerRoundrbf = [errorPerRoundrbf, testset * wrbf * testc];
end
enmc = mean(errorPerRoundnmc); % calculate average
eldc = mean(errorPerRoundldc);
eqdc = mean(errorPerRoundqdc);
ef = mean(errorPerRoundf);
elog = mean(errorPerRoundlog);
e1 = mean(errorPerRound1);
e3 = mean(errorPerRound3);
e5 = mean(errorPerRound5);
e7 = mean(errorPerRound7);
e9 = mean(errorPerRound9);
e11 = mean(errorPerRound11);
ep = mean(errorPerRoundp);
esvc = mean(errorPerRoundsvc);
erbf = mean(errorPerRoundrbf);
disp("0.7 done");
error70 = [enmc, eldc, eqdc, ef, elog, e1, e3, e5, e7, e9, e11, ep, esvc, erbf];

errorPerRoundnmc = []; % classification error per round
errorPerRoundldc = [];
errorPerRoundqdc = [];
errorPerRoundf = [];
errorPerRoundlog = [];
errorPerRound1 = [];
errorPerRound3 = [];
errorPerRound5 = [];
errorPerRound7 = [];
errorPerRound9 = [];
errorPerRound11 = [];
errorPerRoundp = [];
errorPerRoundsvc = [];
errorPerRoundrbf = [];
varianceRetain = 0.65; % how much variance to retain
for i = 1:numRounds
    [testset, trainset] = gendat(dataScenario2, 0.1); % split into train & test data for pcam
    [w, n] = pcam([], varianceRetain);
    unmc = w * nmc;
    wnmc = trainset * unmc;
    errorPerRoundnmc = [errorPerRoundnmc, testset * wnmc * testc];
    uldc = w * ldc;
    wldc = trainset * uldc;
    errorPerRoundldc = [errorPerRoundldc, testset * wldc * testc];
    uqdc = w * qdc;
    wqdc = trainset * uqdc;
    errorPerRoundqdc = [errorPerRoundqdc, testset * wqdc * testc];
    uf = w * fisherc;
    wf = trainset * uf;
    errorPerRoundf = [errorPerRoundf, testset * wf * testc];
    ulog = w * loglc;
    wlog = trainset * ulog;
    errorPerRoundlog = [errorPerRoundlog, testset * wlog * testc];
    u1 = w * knnc([], 1);
    w1 = trainset * u1;
    errorPerRound1 = [errorPerRound1, testset * w1 * testc];
    u3 = w * knnc([], 3);
    w3 = trainset * u3;
    errorPerRound3 = [errorPerRound3, testset * w3 * testc];
    u5 = w * knnc([], 5);
    w5 = trainset * u5;
    errorPerRound5 = [errorPerRound5, testset * w5 * testc];
    u7 = w * knnc([], 7);
    w7 = trainset * u7;
    errorPerRound7 = [errorPerRound7, testset * w7 * testc];
    u9 = w * knnc([], 9);
    w9 = trainset * u9;
    errorPerRound9 = [errorPerRound9, testset * w9 * testc];
    u11 = w * knnc([], 11);
    w11 = trainset * u11;
    errorPerRound11 = [errorPerRound11, testset * w11 * testc];
    disp(i);
    up = w * parzenc;
    wp = trainset * up;
    errorPerRoundp = [errorPerRoundp, testset * wp * testc];
    usvc = pcam([], varianceRetain) * svc;
    wsvc = trainset * usvc;
    errorPerRoundsvc = [errorPerRoundsvc, testset * wsvc * testc];
    urbf = pcam([], varianceRetain) * svc([], proxm('r',1));
    wrbf = trainset * urbf;
    errorPerRoundrbf = [errorPerRoundrbf, testset * wrbf * testc];
end
enmc = mean(errorPerRoundnmc); % calculate average
eldc = mean(errorPerRoundldc);
eqdc = mean(errorPerRoundqdc);
ef = mean(errorPerRoundf);
elog = mean(errorPerRoundlog);
e1 = mean(errorPerRound1);
e3 = mean(errorPerRound3);
e5 = mean(errorPerRound5);
e7 = mean(errorPerRound7);
e9 = mean(errorPerRound9);
e11 = mean(errorPerRound11);
ep = mean(errorPerRoundp);
esvc = mean(errorPerRoundsvc);
erbf = mean(errorPerRoundrbf);
disp("0.65 done");
error65 = [enmc, eldc, eqdc, ef, elog, e1, e3, e5, e7, e9, e11, ep, esvc, erbf];

errorPerRoundnmc = []; % classification error per round
errorPerRoundldc = [];
errorPerRoundqdc = [];
errorPerRoundf = [];
errorPerRoundlog = [];
errorPerRound1 = [];
errorPerRound3 = [];
errorPerRound5 = [];
errorPerRound7 = [];
errorPerRound9 = [];
errorPerRound11 = [];
errorPerRoundp = [];
errorPerRoundsvc = [];
errorPerRoundrbf = [];
varianceRetain = 0.6; % how much variance to retain
for i = 1:numRounds
    [testset, trainset] = gendat(dataScenario2, 0.1); % split into train & test data for pcam
    unmc = pcam([], varianceRetain) * nmc;
    wnmc = trainset * unmc;
    errorPerRoundnmc = [errorPerRoundnmc, testset * wnmc * testc];
    uldc = pcam([], varianceRetain) * ldc;
    wldc = trainset * uldc;
    errorPerRoundldc = [errorPerRoundldc, testset * wldc * testc];
    uqdc = pcam([], varianceRetain) * qdc;
    wqdc = trainset * uqdc;
    errorPerRoundqdc = [errorPerRoundqdc, testset * wqdc * testc];
    uf = pcam([], varianceRetain) * fisherc;
    wf = trainset * uf;
    errorPerRoundf = [errorPerRoundf, testset * wf * testc];
    ulog = pcam([], varianceRetain) * loglc;
    wlog = trainset * ulog;
    errorPerRoundlog = [errorPerRoundlog, testset * wlog * testc];
    u1 = pcam([], varianceRetain) * knnc([], 1);
    w1 = trainset * u1;
    errorPerRound1 = [errorPerRound1, testset * w1 * testc];
    u3 = pcam([], varianceRetain) * knnc([], 3);
    w3 = trainset * u3;
    errorPerRound3 = [errorPerRound3, testset * w3 * testc];
    u5 = pcam([], varianceRetain) * knnc([], 5);
    w5 = trainset * u5;
    errorPerRound5 = [errorPerRound5, testset * w5 * testc];
    u7 = pcam([], varianceRetain) * knnc([], 7);
    w7 = trainset * u7;
    errorPerRound7 = [errorPerRound7, testset * w7 * testc];
    u9 = pcam([], varianceRetain) * knnc([], 9);
    w9 = trainset * u9;
    errorPerRound9 = [errorPerRound9, testset * w9 * testc];
    u11 = pcam([], varianceRetain) * knnc([], 11);
    w11 = trainset * u11;
    errorPerRound11 = [errorPerRound11, testset * w11 * testc];
    disp(i);
    up = pcam([], varianceRetain) * parzenc;
    wp = trainset * up;
    errorPerRoundp = [errorPerRoundp, testset * wp * testc];
    usvc = pcam([], varianceRetain) * svc;
    wsvc = trainset * usvc;
    errorPerRoundsvc = [errorPerRoundsvc, testset * wsvc * testc];
    urbf = pcam([], varianceRetain) * svc([], proxm('r',1));
    wrbf = trainset * urbf;
    errorPerRoundrbf = [errorPerRoundrbf, testset * wrbf * testc];
end
enmc = mean(errorPerRoundnmc); % calculate average
eldc = mean(errorPerRoundldc);
eqdc = mean(errorPerRoundqdc);
ef = mean(errorPerRoundf);
elog = mean(errorPerRoundlog);
e1 = mean(errorPerRound1);
e3 = mean(errorPerRound3);
e5 = mean(errorPerRound5);
e7 = mean(errorPerRound7);
e9 = mean(errorPerRound9);
e11 = mean(errorPerRound11);
ep = mean(errorPerRoundp);
esvc = mean(errorPerRoundsvc);
erbf = mean(errorPerRoundrbf);
disp("0.6 done");
error60 = [enmc, eldc, eqdc, ef, elog, e1, e3, e5, e7, e9, e11, ep, esvc, erbf];

errorPerRoundnmc = []; % classification error per round
errorPerRoundldc = [];
errorPerRoundqdc = [];
errorPerRoundf = [];
errorPerRoundlog = [];
errorPerRound1 = [];
errorPerRound3 = [];
errorPerRound5 = [];
errorPerRound7 = [];
errorPerRound9 = [];
errorPerRound11 = [];
errorPerRoundp = [];
errorPerRoundsvc = [];
errorPerRoundrbf = [];
varianceRetain = 0.55; % how much variance to retain
for i = 1:numRounds
    [testset, trainset] = gendat(cleanedImages, 0.2); % split into train & test data for pcam
    unmc = pcam([], varianceRetain) * nmc;
    wnmc = trainset * unmc;
    errorPerRoundnmc = [errorPerRoundnmc, testset * wnmc * testc];
    uldc = pcam([], varianceRetain) * ldc;
    wldc = trainset * uldc;
    errorPerRoundldc = [errorPerRoundldc, testset * wldc * testc];
    uqdc = pcam([], varianceRetain) * qdc;
    wqdc = trainset * uqdc;
    errorPerRoundqdc = [errorPerRoundqdc, testset * wqdc * testc];
    uf = pcam([], varianceRetain) * fisherc;
    wf = trainset * uf;
    errorPerRoundf = [errorPerRoundf, testset * wf * testc];
    ulog = pcam([], varianceRetain) * loglc;
    wlog = trainset * ulog;
    errorPerRoundlog = [errorPerRoundlog, testset * wlog * testc];
    u1 = pcam([], varianceRetain) * knnc([], 1);
    w1 = trainset * u1;
    errorPerRound1 = [errorPerRound1, testset * w1 * testc];
    u3 = pcam([], varianceRetain) * knnc([], 3);
    w3 = trainset * u3;
    errorPerRound3 = [errorPerRound3, testset * w3 * testc];
    u5 = pcam([], varianceRetain) * knnc([], 5);
    w5 = trainset * u5;
    errorPerRound5 = [errorPerRound5, testset * w5 * testc];
    u7 = pcam([], varianceRetain) * knnc([], 7);
    w7 = trainset * u7;
    errorPerRound7 = [errorPerRound7, testset * w7 * testc];
    u9 = pcam([], varianceRetain) * knnc([], 9);
    w9 = trainset * u9;
    errorPerRound9 = [errorPerRound9, testset * w9 * testc];
    u11 = pcam([], varianceRetain) * knnc([], 11);
    w11 = trainset * u11;
    errorPerRound11 = [errorPerRound11, testset * w11 * testc];
    disp(i);
    up = pcam([], varianceRetain) * parzenc;
    wp = trainset * up;
    errorPerRoundp = [errorPerRoundp, testset * wp * testc];
    usvc = pcam([], varianceRetain) * svc;
    wsvc = trainset * usvc;
    errorPerRoundsvc = [errorPerRoundsvc, testset * wsvc * testc];
    urbf = pcam([], varianceRetain) * svc([], proxm('r',1));
    wrbf = trainset * urbf;
    errorPerRoundrbf = [errorPerRoundrbf, testset * wrbf * testc];
end
enmc = mean(errorPerRoundnmc); % calculate average
eldc = mean(errorPerRoundldc);
eqdc = mean(errorPerRoundqdc);
ef = mean(errorPerRoundf);
elog = mean(errorPerRoundlog);
e1 = mean(errorPerRound1);
e3 = mean(errorPerRound3);
e5 = mean(errorPerRound5);
e7 = mean(errorPerRound7);
e9 = mean(errorPerRound9);
e11 = mean(errorPerRound11);
ep = mean(errorPerRoundp);
esvc = mean(errorPerRoundsvc);
erbf = mean(errorPerRoundrbf);
disp("0.55 done");
error55 = [enmc, eldc, eqdc, ef, elog, e1, e3, e5, e7, e9, e11, ep, esvc, erbf];
%% 
numRounds = 5;
errorPerRoundnmc = []; % classification error per round
errorPerRoundldc = [];
errorPerRoundqdc = [];
errorPerRoundf = [];
errorPerRoundlog = [];
errorPerRound1 = [];
errorPerRound3 = [];
errorPerRound5 = [];
errorPerRound7 = [];
errorPerRound9 = [];
errorPerRound11 = [];
errorPerRoundp = [];
errorPerRoundsvc = [];
errorPerRoundrbf = [];
errorPerRoundn = [];
varianceRetain = 0.95; % how much variance to retain
for i = 1:numRounds
    [testset, trainset] = gendat(prof2, 0.2); % split into train & test data for pcam
    [w, n] = pcam([], varianceRetain);
    unmc = w * nmc;
    wnmc = trainset * unmc;
    errorPerRoundnmc = [errorPerRoundnmc, testset * wnmc * testc];
    uldc = w * ldc;
    wldc = trainset * uldc;
    errorPerRoundldc = [errorPerRoundldc, testset * wldc * testc];
    uqdc = w * qdc;
    wqdc = trainset * uqdc;
    errorPerRoundqdc = [errorPerRoundqdc, testset * wqdc * testc];
    uf = w * fisherc;
    wf = trainset * uf;
    errorPerRoundf = [errorPerRoundf, testset * wf * testc];
    ulog = w * loglc;
    wlog = trainset * ulog;
    errorPerRoundlog = [errorPerRoundlog, testset * wlog * testc];
    u1 = w * knnc([], 1);
    w1 = trainset * u1;
    errorPerRound1 = [errorPerRound1, testset * w1 * testc];
    u3 = w * knnc([], 3);
    w3 = trainset * u3;
    errorPerRound3 = [errorPerRound3, testset * w3 * testc];
    u5 = w * knnc([], 5);
    w5 = trainset * u5;
    errorPerRound5 = [errorPerRound5, testset * w5 * testc];
    u7 = w * knnc([], 7);
    w7 = trainset * u7;
    errorPerRound7 = [errorPerRound7, testset * w7 * testc];
    u9 = w * knnc([], 9);
    w9 = trainset * u9;
    errorPerRound9 = [errorPerRound9, testset * w9 * testc];
    u11 = w * knnc([], 11);
    w11 = trainset * u11;
    errorPerRound11 = [errorPerRound11, testset * w11 * testc];
    disp(i);
    up = w * parzenc;
    wp = trainset * up;
    errorPerRoundp = [errorPerRoundp, testset * wp * testc];
    usvc = w * svc;
    wsvc = trainset * usvc;
    errorPerRoundsvc = [errorPerRoundsvc, testset * wsvc * testc];
    urbf = w * svc([], proxm('r',1));
    wrbf = trainset * urbf;
    errorPerRoundrbf = [errorPerRoundrbf, testset * wrbf * testc];
end
enmc = mean(errorPerRoundnmc); % calculate average
eldc = mean(errorPerRoundldc);
eqdc = mean(errorPerRoundqdc);
ef = mean(errorPerRoundf);
elog = mean(errorPerRoundlog);
e1 = mean(errorPerRound1);
e3 = mean(errorPerRound3);
e5 = mean(errorPerRound5);
e7 = mean(errorPerRound7);
e9 = mean(errorPerRound9);
e11 = mean(errorPerRound11);
ep = mean(errorPerRoundp);
esvc = mean(errorPerRoundsvc);
erbf = mean(errorPerRoundrbf);
disp("0.55 done");
errorProf2 = [enmc, eldc, eqdc, ef, elog, e1, e3, e5, e7, e9, e11, ep, esvc, erbf];

%% %% Feature extraction fisherm on profiles features
set = gendat(cleanedDataset24, 0.05);
numRounds = 10;
errorPerRoundnmc = []; % classification error per round
errorPerRoundldc = [];
errorPerRoundqdc = [];
errorPerRoundf = [];
errorPerRoundlog = [];
errorPerRound1 = [];
errorPerRound3 = [];
errorPerRound5 = [];
errorPerRound7 = [];
errorPerRound9 = [];
errorPerRound11 = [];
errorPerRoundp = [];
errorPerRoundsvc = [];
errorPerRoundrbf = [];
errorPerRoundn = [];
varianceRetain = 9; % how many features to obtain
for i = 1:numRounds
    [testset, trainset] = gendat(set, 0.1); % split into train and test data
    w = fisherm([], varianceRetain);
    unmc = w * nmc;
    wnmc = trainset * unmc;
    errorPerRoundnmc = [errorPerRoundnmc, testset * wnmc * testc];
    uldc = w * ldc;
    wldc = trainset * uldc;
    errorPerRoundldc = [errorPerRoundldc, testset * wldc * testc];
    uqdc = w * qdc;
    wqdc = trainset * uqdc;
    errorPerRoundqdc = [errorPerRoundqdc, testset * wqdc * testc];
    uf = w * fisherc;
    wf = trainset * uf;
    errorPerRoundf = [errorPerRoundf, testset * wf * testc];
    ulog = w * loglc;
    wlog = trainset * ulog;
    errorPerRoundlog = [errorPerRoundlog, testset * wlog * testc];
    u1 = w * knnc([], 1);
    w1 = trainset * u1;
    errorPerRound1 = [errorPerRound1, testset * w1 * testc];
    u3 = w * knnc([], 3);
    w3 = trainset * u3;
    errorPerRound3 = [errorPerRound3, testset * w3 * testc];
    u5 = w * knnc([], 5);
    w5 = trainset * u5;
    errorPerRound5 = [errorPerRound5, testset * w5 * testc];
    u7 = w * knnc([], 7);
    w7 = trainset * u7;
    errorPerRound7 = [errorPerRound7, testset * w7 * testc];
    u9 = w * knnc([], 9);
    w9 = trainset * u9;
    errorPerRound9 = [errorPerRound9, testset * w9 * testc];
    u11 = w * knnc([], 11);
    w11 = trainset * u11;
    errorPerRound11 = [errorPerRound11, testset * w11 * testc];
    disp(i);
    up = w * parzenc;
    wp = trainset * up;
    errorPerRoundp = [errorPerRoundp, testset * wp * testc];
    usvc = w * svc;
    wsvc = trainset * usvc;
    errorPerRoundsvc = [errorPerRoundsvc, testset * wsvc * testc];
    urbf = w * svc([], proxm('r',1));
    wrbf = trainset * urbf;
    errorPerRoundrbf = [errorPerRoundrbf, testset * wrbf * testc];
    un = w * neurc;
    wn = trainset * un;
    errorPerRoundn = [errorPerRoundn, testset * wn * testc];
end
enmc = mean(errorPerRoundnmc); % calculate average
eldc = mean(errorPerRoundldc);
eqdc = mean(errorPerRoundqdc);
ef = mean(errorPerRoundf);
elog = mean(errorPerRoundlog);
e1 = mean(errorPerRound1);
e3 = mean(errorPerRound3);
e5 = mean(errorPerRound5);
e7 = mean(errorPerRound7);
e9 = mean(errorPerRound9);
e11 = mean(errorPerRound11);
ep = mean(errorPerRoundp);
esvc = mean(errorPerRoundsvc);
erbf = mean(errorPerRoundrbf);
en = mean(errorPerRoundn);

error9 = [enmc, eldc, eqdc, ef, elog, e1, e3, e5, e7, e9, e11, ep, esvc, erbf, en];

errorPerRoundnmc = []; % classification error per round
errorPerRoundldc = [];
errorPerRoundqdc = [];
errorPerRoundf = [];
errorPerRoundlog = [];
errorPerRound1 = [];
errorPerRound3 = [];
errorPerRound5 = [];
errorPerRound7 = [];
errorPerRound9 = [];
errorPerRound11 = [];
errorPerRoundp = [];
errorPerRoundsvc = [];
errorPerRoundrbf = [];
errorPerRoundn = [];
varianceRetain = 5; % how many features to obtain
for i = 1:numRounds
    [testset, trainset] = gendat(set, 0.1); % split into train & test data for fisherm
    w = fisherm([], varianceRetain);
    unmc = w * nmc;
    wnmc = trainset * unmc;
    errorPerRoundnmc = [errorPerRoundnmc, testset * wnmc * testc];
    uldc = w * ldc;
    wldc = trainset * uldc;
    errorPerRoundldc = [errorPerRoundldc, testset * wldc * testc];
    uqdc = w * qdc;
    wqdc = trainset * uqdc;
    errorPerRoundqdc = [errorPerRoundqdc, testset * wqdc * testc];
    uf = w * fisherc;
    wf = trainset * uf;
    errorPerRoundf = [errorPerRoundf, testset * wf * testc];
    ulog = w * loglc;
    wlog = trainset * ulog;
    errorPerRoundlog = [errorPerRoundlog, testset * wlog * testc];
    u1 = w * knnc([], 1);
    w1 = trainset * u1;
    errorPerRound1 = [errorPerRound1, testset * w1 * testc];
    u3 = w * knnc([], 3);
    w3 = trainset * u3;
    errorPerRound3 = [errorPerRound3, testset * w3 * testc];
    u5 = w * knnc([], 5);
    w5 = trainset * u5;
    errorPerRound5 = [errorPerRound5, testset * w5 * testc];
    u7 = w * knnc([], 7);
    w7 = trainset * u7;
    errorPerRound7 = [errorPerRound7, testset * w7 * testc];
    u9 = w * knnc([], 9);
    w9 = trainset * u9;
    errorPerRound9 = [errorPerRound9, testset * w9 * testc];
    u11 = w * knnc([], 11);
    w11 = trainset * u11;
    errorPerRound11 = [errorPerRound11, testset * w11 * testc];
    disp(i);
    up = w * parzenc;
    wp = trainset * up;
    errorPerRoundp = [errorPerRoundp, testset * wp * testc];
    usvc = w * svc;
    wsvc = trainset * usvc;
    errorPerRoundsvc = [errorPerRoundsvc, testset * wsvc * testc];
    urbf = w * svc([], proxm('r',1));
    wrbf = trainset * urbf;
    errorPerRoundrbf = [errorPerRoundrbf, testset * wrbf * testc];
    un = w * neurc;
    wn = trainset * un;
    errorPerRoundn = [errorPerRoundn, testset * wn * testc];
end
enmc = mean(errorPerRoundnmc); % calculate average
eldc = mean(errorPerRoundldc);
eqdc = mean(errorPerRoundqdc);
ef = mean(errorPerRoundf);
elog = mean(errorPerRoundlog);
e1 = mean(errorPerRound1);
e3 = mean(errorPerRound3);
e5 = mean(errorPerRound5);
e7 = mean(errorPerRound7);
e9 = mean(errorPerRound9);
e11 = mean(errorPerRound11);
ep = mean(errorPerRoundp);
esvc = mean(errorPerRoundsvc);
erbf = mean(errorPerRoundrbf);
en = mean(errorPerRoundn);

error5 = [enmc, eldc, eqdc, ef, elog, e1, e3, e5, e7, e9, e11, ep, esvc, erbf, en];
%% Cross validation on all pixels -> not enough memory
error = prcrossval(dataScenario2, ldc, 5);
%% feature selection nmc
% errornmc = prcrossval(profileDataset, {selI, selO, selF, selB, selP, selLR, 1} *nmc, 5);
%% feature selection fisherc
%errorfisherc = prcrossval(profileDataset, {selI, selO, selF, selB, selP, selLR, 1}*fisherc, 5);
%% feature selection qdc
%errorqdc = prcrossval(profileDataset, {selI, selO, selF, selB, selP, selLR}*qdc, 5);
%% feature selection loglc
%errorloglc = prcrossval(profileDataset, {selI, selO, selF, selB, selP, selLR, 1}*loglc, 5);
%% get best features
[w, r] = featselo(profileDataset, 'maha-s');
%% test knnc
%error = prcrossval(profileDataset, knnc([], 1), 5);
%% Profile features function
% Returns a dataset with the profile features
function profileDataset = getProfileDataset(cleanedImages, labels, numBins)
    profiles = [];
    for imageIndex = 1:size(cleanedImages, 1) % for each image
        profilePerImage = [];
        image = cleanedImages(imageIndex, :);
        imageDim = sqrt(length(image));
        partialNum = imageDim / numBins;
        for bin = 0:(numBins - 1) % for each bin at the top of the image
            sum = 0; % sum of pixels
            for col = 1:partialNum %for each column
                i = bin * partialNum + col; % actual column index
                row = 0; % row number
                pixel = row * imageDim + i;
                while row < imageDim && image(pixel) ~= 1 %while no white pixel is encountered
                    sum = sum + 1;
                    row = row + 1;
                    pixel = row * imageDim + i;
                end
            end
            profilePerImage = [profilePerImage, sum];
        end
        for bin = 0:(numBins - 1) % for each bin at the bottom of the image
            sum = 0; % sum of pixels
            for col = 1:partialNum %for each column
                i = bin * partialNum + col; % actual column index
                row = imageDim - 1; % row number
                pixel = row * imageDim + i;
                while row >= 0 && image(pixel) ~= 1  %while no white pixel is encountered
                    sum = sum + 1;
                    row = row - 1;
                    pixel = row * imageDim + i;
                end
            end
            profilePerImage = [profilePerImage, sum];
        end
        for bin = 0: (numBins - 1) % for each bin at the left of the image
            sum = 0; % sum of pixels
            for row = 1:partialNum %for each row
                i = bin * partialNum + row; % actual row index
                col = 1; % column number
                pixel = (i - 1) * imageDim + col;
                while col <= imageDim && image(pixel) ~= 1  %while no white pixel is encountered
                    sum = sum + 1;
                    col = col + 1;
                    pixel = (i - 1) * imageDim + col;
                end
            end
            profilePerImage = [profilePerImage, sum];
        end
        for bin = 0: (numBins - 1) % for each bin at the right of the image
            sum = 0; % sum of pixels
            for row = 1:partialNum %for each row
                i = bin * partialNum + row; % actual row index
                col = imageDim; % column number
                pixel = (i - 1) * imageDim + col;
                while col >= 1 && image(pixel) ~= 1  %while no white pixel is encountered
                    sum = sum + 1;
                    col = col - 1;
                    pixel = (i - 1) * imageDim + col;
                end
            end
            profilePerImage = [profilePerImage, sum];
        end
        profiles = [profiles; profilePerImage];
    end

    profileDataset = prdataset(profiles, labels); % create dataset with new features
end